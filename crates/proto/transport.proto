syntax = "proto3";

package miden_transport;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "miden-node/proto/proto/types/note.proto";

// Note status enum
enum NoteStatus {
    SENT = 0;
    MARKED = 1;
    DUPLICATE = 2;
}

// Encrypted details wrapper
message EncryptedDetails {
    bytes data = 1;
}

// User ID wrapper
message UserId {
    string value = 1;
}

// API request for sending a note
message SendNoteRequest {
    bytes header = 1;
    EncryptedDetails encrypted_details = 2;
}

// API response for sending a note
message SendNoteResponse {
    string id = 1;  // NoteId as hex string
    NoteStatus status = 2;
}

// API request for fetching notes
message FetchNotesRequest {
    string tag = 1;  // NoteTag as hex string
}

// API response for fetching notes
message FetchNotesResponse {
    repeated NoteInfo notes = 1;
}

// Information about a note in API responses
message NoteInfo {
    bytes header = 1;
    EncryptedDetails encrypted_data = 2;
    google.protobuf.Timestamp created_at = 3;
}

// API request for marking a note as received
message MarkReceivedRequest {
    string id = 1;  // NoteId as hex string
    string user_id = 2;
}

// API response for marking a note as received
message MarkReceivedResponse {
    NoteStatus status = 1;
}

// Server health check response
message HealthResponse {
    string status = 1;
    google.protobuf.Timestamp timestamp = 2;
    string version = 3;
}

// Server statistics
message StatsResponse {
    uint64 total_notes = 1;
    uint64 total_tags = 2;
    repeated TagStats notes_per_tag = 3;
}

// Statistics for a specific tag
message TagStats {
    string tag = 1;  // NoteTag as hex string
    uint64 note_count = 2;
    google.protobuf.Timestamp last_activity = 3;
}

// gRPC service definition
service MidenTransport {
    // Send a note to the server
    rpc SendNote(SendNoteRequest) returns (SendNoteResponse);
    
    // Fetch notes for a specific tag
    rpc FetchNotes(FetchNotesRequest) returns (FetchNotesResponse);
    
    // Mark a note as received
    rpc MarkReceived(MarkReceivedRequest) returns (MarkReceivedResponse);
    
    // Health check
    rpc Health(google.protobuf.Empty) returns (HealthResponse);
    
    // Get server statistics
    rpc Stats(google.protobuf.Empty) returns (StatsResponse);
} 
