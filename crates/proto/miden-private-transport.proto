syntax = "proto3";

package miden_private_transport;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "types/note.proto";

// Note status enum
enum NoteStatus {
    SENT = 0;
    DUPLICATE = 1;
}

// A Note exchanged over the Transport Layer.
// Includes the full header for NoteId, NoteTag access.
message TransportNote {
    // NoteHeader
    bytes header = 1;
    // NoteDetails, can be encrypted
    bytes details = 2;
}

message TransportNoteTimestamped {
    // Note
    TransportNote note = 1;
    // Transport Layer timestamp
    google.protobuf.Timestamp timestamp = 2;
}

// API request for sending a note
message SendNoteRequest {
    TransportNote note = 1;
}

// API response for sending a note
message SendNoteResponse {
    string id = 1;  // NoteId as hex string
    NoteStatus status = 2;
}

// API request for fetching notes
message FetchNotesRequest {
    fixed32 tag = 1;
    google.protobuf.Timestamp timestamp = 2;
}

// API response for fetching notes
message FetchNotesResponse {
    repeated TransportNoteTimestamped notes = 1;
}

// Server health check response
message HealthResponse {
    string status = 1;
    google.protobuf.Timestamp timestamp = 2;
    string version = 3;
}

// Server statistics
message StatsResponse {
    uint64 total_notes = 1;
    uint64 total_tags = 2;
    repeated TagStats notes_per_tag = 3;
}

// Statistics for a specific tag
message TagStats {
    fixed32 tag = 1;
    uint64 note_count = 2;
    google.protobuf.Timestamp last_activity = 3;
}

// gRPC service definition
service MidenPrivateTransport {
    // Send a note to the server
    rpc SendNote(SendNoteRequest) returns (SendNoteResponse);
    
    // Fetch notes for a specific tag
    rpc FetchNotes(FetchNotesRequest) returns (FetchNotesResponse);
    
    // Health check
    rpc Health(google.protobuf.Empty) returns (HealthResponse);
    
    // Get server statistics
    rpc Stats(google.protobuf.Empty) returns (StatsResponse);
} 
